name: Build and Publish Docker Image

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ github.sha }}
          type=ref,event=pr,suffix=-pr
          type=raw,value=latest-nightly,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Get version from CMakeLists.txt
      id: version
      run: |
        MAJOR=$(grep 'SET(.*_MAJOR_VERSION' CMakeLists.txt | grep -o '[0-9]\+')
        MINOR=$(grep 'SET(.*_MINOR_VERSION' CMakeLists.txt | grep -o '[0-9]\+')
        PATCH=$(grep 'SET(.*_PATCH_LEVEL' CMakeLists.txt | grep -o '[0-9]\+')
        VERSION="${MAJOR}.${MINOR}.${PATCH}"
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Found version: ${VERSION}"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          USE_HACKRF=1
          USE_RTLSDR=0
          USE_BLADERF=0
          USE_OPENCL=0
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json